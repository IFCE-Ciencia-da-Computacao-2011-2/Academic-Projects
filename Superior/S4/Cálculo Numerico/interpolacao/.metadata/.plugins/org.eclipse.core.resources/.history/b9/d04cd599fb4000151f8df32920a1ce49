package interpolacao.lagrante.polinomio;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Polinomio {

	private List<Termo> termos;

	public Polinomio() {
		termos = new ArrayList<>();
	}

	public Polinomio somarCom(Polinomio polinomio) {
		Polinomio resultado = new Polinomio();

		for (Termo termo : this.getTermos())
			resultado.add(termo);

		for (Termo termo : polinomio.getTermos())
			resultado.add(termo);

		return resultado;
	}

	public Polinomio add(Termo termo) {
		Termo termoJaComputado = getTermo(termo.getExpoente());

		Termo resultado = termoJaComputado.somarCom(termo);

		this.termos.remove(termo);
		this.termos.add(resultado);
		
		return this;
	}

	public Termo getTermo(int expoente) {
		for (Termo termo : termos)
			if (termo.getExpoente() == expoente)
				return termo;

		return new Termo(0, expoente);
	}

	public Polinomio multiplica(Polinomio outro) {
		return null;
	}

	protected List<Termo> getTermos() {
		return termos;
	}

	@Override
	public boolean equals(Object obj) {
		Polinomio polinomio = (Polinomio) obj;
		
		for (Termo termo : termos) {
			Termo equivalente = polinomio.getTermo(termo.getExpoente());
			if (termo.equals(equivalente))
				continue;

			return false;
		}

		return this.getTermos().size() == polinomio.getTermos().size();
	}

	public String toString() {
		List<Termo> termosOrdenados;

		StringBuilder builder = new StringBuilder();
		for (Termo termo : termosOrdenados)
			builder.append(" " + termo);
		
		return builder.toString();
	}
	
	private List<Termo> sort(List<Termo> termos) {
		List<Termo> termosOrdenados = new ArrayList<>();

		Comparator<Termo> byExpoente = (t1, t2) -> Integer.compare(t1.getExpoente(), t2.getExpoente());

	    termos.stream()
	    	  .sorted(byExpoente)
	          .forEach(termo -> termosOrdenados.add(termo));
	}
}
