package interpolacao.newton;

import java.util.ArrayList;
import java.util.List;

import interpolacao.Coordenada;
import interpolacao.Raizes;

public class TabelaDeDiferencasDivididas {
	private Raizes raizes;

	public TabelaDeDiferencasDivididas(Raizes raizes) {
		this.raizes = raizes;
	}

	class Ordem {
		private int numero;
		private List<FuncaoDiferenca> funcoes;

		public Ordem() {
			this(0);
		}

		public Ordem(int numero) {
			this.numero = numero;
			this.funcoes = new ArrayList<>();
		}

		Ordem gerarOrdem() {
			List<FuncaoDiferenca> funcoesNovaOrdem = new ArrayList<>();

			for (int i = 0; i < funcoes.size()-1; i++) {
				FuncaoDiferenca funcaoIPlus1 = funcoes.get(i+1);
				FuncaoDiferenca funcaoI = funcoes.get(i);
				funcoesNovaOrdem.add(funcaoIPlus1.gerarCom(funcaoI));
			}
		}
	}
	
	class FuncaoDiferenca {

		private Coordenada maiorX;
		private Coordenada menorX;
		double valor;

		public FuncaoDiferenca(Coordenada maiorX, Coordenada menorX) {
			this.maiorX = maiorX;
			this.menorX = menorX;
		}

		public FuncaoDiferenca(double valor) {
			this.valor = valor;
		}

		public FuncaoDiferenca gerarCom(FuncaoDiferenca funcaoAnterior) {
			(this.valor - funcaoAnterior.getValor()) / this.valor.getMaiorX() - this.valor.getMenorX();
			return new FuncaoDiferenca(valor);
			return null;
		}

		public Coordenada getMaiorX() {
			return maiorX;
		}

		public Coordenada getMenorX() {
			return menorX;
		}
	}
}
